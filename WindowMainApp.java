//<editor-fold desc="IMPORTS">
package eleTest;
import java.awt.Font;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.table.JTableHeader;
//</editor-fold>

public class WindowMainApp extends javax.swing.JFrame {
    //<editor-fold desc="INITIALIZATION">
    private final Controller controller;
    //</editor-fold>

    //<editor-fold desc="CONSTRUCTORS"> 
    public WindowMainApp(Controller controller) {
        this.controller = controller;
        initComponents();
        this.setTitle("Elevator Program");
        // change table header font:
        JTableHeader header = tblSimulation.getTableHeader();
        header.setFont(
            new Font(
                "SansSerif", 
                Font.BOLD | Font.ITALIC,
                14 //size
            )
        );
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSimulation = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        txtFloors = new javax.swing.JTextField();
        txtElevators = new javax.swing.JTextField();
        txtGuests = new javax.swing.JTextField();
        lblGuests = new javax.swing.JLabel();
        lblElevators = new javax.swing.JLabel();
        lblFloors = new javax.swing.JLabel();
        txtEmployees = new javax.swing.JTextField();
        txtCapacity = new javax.swing.JTextField();
        lblEmployees = new javax.swing.JLabel();
        lblElevatorCapacity = new javax.swing.JLabel();
        btnSaveScenario = new javax.swing.JButton();
        btnStopSimulation = new javax.swing.JButton();
        btnRunSimulation = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblSimulation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblSimulation);

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        txtFloors.setText("3");

        txtElevators.setText("2");

        txtGuests.setText("10");

        lblGuests.setText("Guests");

        lblElevators.setText("Elevators");

        lblFloors.setText("Floors");

        txtEmployees.setText("0");

        txtCapacity.setText("5");

        lblEmployees.setText("Employees");

        lblElevatorCapacity.setText("Elevator Capacity");

        btnSaveScenario.setText("Save Scenario");
        btnSaveScenario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveScenarioActionPerformed(evt);
            }
        });

        btnStopSimulation.setText("Stop");
        btnStopSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopSimulationActionPerformed(evt);
            }
        });

        btnRunSimulation.setText("Run");
        btnRunSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunSimulationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSaveScenario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lblFloors)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFloors, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lblElevators)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtElevators, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblElevatorCapacity)
                                    .addComponent(lblGuests)
                                    .addComponent(lblEmployees))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtGuests, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                                    .addComponent(txtEmployees)
                                    .addComponent(txtCapacity)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnRunSimulation, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStopSimulation, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFloors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFloors))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtElevators, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblElevators))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGuests, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGuests))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmployees, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmployees))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblElevatorCapacity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSaveScenario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStopSimulation)
                    .addComponent(btnRunSimulation))
                .addGap(0, 38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //</editor-fold>
    
    //<editor-fold desc="FUNCTIONS"> 
    private void btnSaveScenarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveScenarioActionPerformed
        controller.setScenario(
            1+Integer.parseInt(txtFloors.getText())     /*numberOfFloors*/,
            Integer.parseInt(txtElevators.getText())    /*numberOfElevators*/,
            Integer.parseInt(txtGuests.getText())       /*numberOfGuests*/,
            Integer.parseInt(txtEmployees.getText())    /*numberOfEmployees*/,
            Integer.parseInt(txtCapacity.getText())     /*numberOfCapacity*/
        );
        configureBuildingDisplay();
        update();
    }//GEN-LAST:event_btnSaveScenarioActionPerformed

    private void btnRunSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunSimulationActionPerformed
        controller.runSimulation();
    }//GEN-LAST:event_btnRunSimulationActionPerformed

    private void btnStopSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopSimulationActionPerformed
        controller.stopSimulation();
    }//GEN-LAST:event_btnStopSimulationActionPerformed

    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WindowMainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WindowMainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WindowMainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WindowMainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        // Create the controller object
        final Controller controller = new Controller();

        // create and start new thread:
        ThreadAnimation thp = new ThreadAnimation(controller);
        Thread th = new Thread(thp);
        th.start();

        //Create and display the form 
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                //Create the window
                WindowMainApp mainWindow = new WindowMainApp(controller);
                //Let controller know the window object
                controller.setWindow(mainWindow);
                //Visualize the window
                mainWindow.setVisible(true);
            }
        });
    }//main

    public void configureBuildingDisplay() {
        //populate table columns
        int numberOfElevators = controller.getNumberOfElevators();
        int columns = 3 // Floor#, On Floor, Waiting for Ele
                    + numberOfElevators; //each elevator gets its own column
        String[] columnNames = new String[columns];
        for (int idx = 0; idx < columns; idx++) {
            switch (idx) {
                case 0: 
                    columnNames[idx] = "Floor#";
                    break;
                case 1: 
                    columnNames[idx] = "On floor";
                    break;
                case 2:  
                    columnNames[idx] = "Waiting for Ele";
                    break;
                default: //create labels for elevators
                    columnNames[idx] = Integer.toString(ElevatorBank.getInstance().getElevator(idx-3).getLabel()+1);
                    break;
            }
        }
        
        // populate table rows
        int numberOfFloors = controller.getNumberOfFloors();
        Object[][] tableContent = new Object[numberOfFloors][columns];
        for (int row = tableContent.length - 1; row > -1; --row) {
            ArrayList<Floor> floors = ElevatorBank.getInstance().getFloors();
            // to traverse the floors top-down, calculate index of the
            // floor as follows:
            Floor floor = floors.get(floors.size() - row - 1);
            //label the first column with floor numbers
            tableContent[row][0] = floor.getLabel();
        }
        // pass the data to the table gadget:
        tblSimulation.setModel(
            new javax.swing.table.DefaultTableModel(tableContent, columnNames)
        );
    }//configureBuildingDisplay

    public void update() {
        // controller calls this method to
        // update the elevator-floor view
        // save scenario also calls this
        // to visualize latest config
        ArrayList<Elevator> elevators = ElevatorBank.getInstance().getElevators();
        ArrayList<Floor> floors = ElevatorBank.getInstance().getFloors();
        int columnIndex = 3; // reserves columns for non elevator columns

        // clear all locations:
        for (int rowIdx = 0; rowIdx < floors.size(); ++rowIdx) {
            //We start this at one so it skips the "Floor #" column
            for (int columnIdx = 1; columnIdx < columnIndex + elevators.size(); ++columnIdx) {
                tblSimulation.getModel().setValueAt(null, rowIdx, columnIdx);
            }
        }

        //check if any visitors want to change floors
        for (Floor floor : floors) {
            for (Visitor visitor : floor.getVisitors()) {
                if (visitor.getFloor() != visitor.getDestination() && visitor.getState() == VisitorStates.ON_FLOOR) {
                    visitor.setState(VisitorStates.WAITING_FOR_ELEVATOR);
                }
                if (visitor.getState() == VisitorStates.WAITING_FOR_ELEVATOR) {
                    ElevatorBank.getInstance().callElevator(visitor);
                }
                for (Elevator elevator : elevators) {
                    if (visitor.getState() == VisitorStates.WAITING_FOR_ELEVATOR
                        && elevator.getState() == ElevatorStates.OPEN_DOORS
                        && elevator.getFloor() == visitor.getFloor()
                        && elevator.getVisitorsSize() < elevator.getCapacity()) {
                        visitor.visit(elevator);
                        floor.remove();
                    }
                }
            }
        }

        // update model for elevator location:
        for (Elevator elevator : elevators) {
            int rowIndex = floors.size() - elevator.getFloor() - 1;
            tblSimulation.getModel().setValueAt(
                elevator.getVisitorsSize() + "/" + elevator.getCapacity(),
                rowIndex, columnIndex // write to elevator location
            );
            ++columnIndex; //next elevator shown in the next table column
        }

        //update model for visitors who are fine where they are
        for (int row = floors.size() - 1; row > -1; --row) {
            tblSimulation.getModel().setValueAt(
                floors.get(row).getNonwaitingVisitors(),
                floors.size() - row - 1, 1 //location
            );
        }

        //update model for visitors who are waiting for elevator
        for (int row = floors.size() - 1; row > -1; --row) {
            tblSimulation.getModel().setValueAt(
                floors.get(row).getWaitingVisitors(),
                floors.size() - row - 1, 2 //location
            );
        }
    }//update
    //</editor-fold>

    //<editor-fold desc="Variables Declaration">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRunSimulation;
    private javax.swing.JButton btnSaveScenario;
    private javax.swing.JButton btnStopSimulation;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblElevatorCapacity;
    private javax.swing.JLabel lblElevators;
    private javax.swing.JLabel lblEmployees;
    private javax.swing.JLabel lblFloors;
    private javax.swing.JLabel lblGuests;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JTable tblSimulation;
    private javax.swing.JTextField txtCapacity;
    private javax.swing.JTextField txtElevators;
    private javax.swing.JTextField txtEmployees;
    private javax.swing.JTextField txtFloors;
    private javax.swing.JTextField txtGuests;
    // End of variables declaration//GEN-END:variables
//</editor-fold>
}//class WindowMainApp
